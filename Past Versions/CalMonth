//
//  RKMonth.swift
//  RKCalendar
//
//  Created by Raffi Kian on 7/14/19.
//  Copyright Â© 2019 Raffi Kian. All rights reserved.
//

import SwiftUI

struct RKMonth: View {

    @Binding var isPresented: Bool
    @Binding var selectedDate: Date!
    var minimumDate: Date
    var maximumDate: Date
    
    let monthOffset: Int
    
    let calendarUnitYMD = Set<Calendar.Component>([.year, .month, .day])
    var monthsArray: [[Date]] { monthArray() }
    let cellWidth = CGFloat(32)
    var startDate: Date! = nil
    var endDate: Date! = nil
    
    @State var showTime = false
    
    
    var body: some View {
        VStack(alignment: HorizontalAlignment.center, spacing: 10) {
            Text(getMonthHeader()).foregroundColor(Color.black)
            VStack(alignment: .leading, spacing: 5) {
                ForEach(monthsArray, id:  \.self) { row in
                    HStack() {
                        ForEach(row, id:  \.self) { column in
                            HStack() {
                                Spacer()
                                if Calendar.current.isDate(column, equalTo: self.firstOfMonthForOffset(), toGranularity: .month) {
                                    RKCell(rkDate: RKDate(
                                        date: column,
                                        isToday: self.isToday(date: column),
                                        isSelected: self.isSpecialDate(date: column)),
                                        cellWidth: self.cellWidth)
                                        .onTapGesture { self.dateTapped(date: column) }
                                } else {
                                    Text("").frame(width: self.cellWidth, height: self.cellWidth)
                                }
                                Spacer()
                            }
                        }
                    }
                }
            }.frame(minWidth: 0, maxWidth: .infinity)
        }.background(Color.white)
    }
    
    func dateTapped(date: Date) {
        if self.selectedDate != nil && Calendar.current.isDate(self.selectedDate, inSameDayAs: date) {
            self.selectedDate = nil
        } else {
            self.selectedDate = date
        }
        
        print("SELECTED DATE: ", self.selectedDate)
        self.isPresented = false
    }
     
    func monthArray() -> [[Date]] {
        var rowArray = [[Date]]()
        for row in 0 ..< (numberOfDays(offset: monthOffset) / 7) {
            var columnArray = [Date]()
            for column in 0 ... 6 {
                let abc = self.getDateAtIndex(index: (row * 7) + column)
                columnArray.append(abc)
            }
            rowArray.append(columnArray)
        }
        return rowArray
    }
    
    func getMonthHeader() -> String {
        let headerDateFormatter = DateFormatter()
        headerDateFormatter.calendar = Calendar.current
        headerDateFormatter.dateFormat = DateFormatter.dateFormat(fromTemplate: "yyyy LLLL", options: 0, locale:  Calendar.current.locale)
        
        return headerDateFormatter.string(from: firstOfMonthForOffset()).uppercased()
    }
    
    func getDateAtIndex(index: Int) -> Date {
        let firstOfMonth = firstOfMonthForOffset()
        let weekday =  Calendar.current.component(.weekday, from: firstOfMonth)
        var startOffset = weekday -  Calendar.current.firstWeekday
        startOffset += startOffset >= 0 ? 0 : 7 //(days per week)
        var dateComponents = DateComponents()
        dateComponents.day = index - startOffset
        
        return  Calendar.current.date(byAdding: dateComponents, to: firstOfMonth)!
    }
    
    func numberOfDays(offset : Int) -> Int {
        let firstOfMonth = firstOfMonthForOffset()
        let rangeOfWeeks =  Calendar.current.range(of: .weekOfMonth, in: .month, for: firstOfMonth)
        
        return (rangeOfWeeks?.count)! * 7 //(days per week)
    }
    
    func firstOfMonthForOffset() -> Date {
        var offset = DateComponents()
        offset.month = monthOffset
        
        var components =  Calendar.current.dateComponents(calendarUnitYMD, from: minimumDate)
        components.day = 1
        
        return  Calendar.current.date(byAdding: offset, to: Calendar.current.date(from: components)!)!
    }
    
    func RKFormatAndCompareDate(date: Date, referenceDate: Date) -> Bool {
        let refDate = Calendar.current.date(from: Calendar.current.dateComponents(calendarUnitYMD, from: referenceDate))
        let clampedDate = Calendar.current.date(from: Calendar.current.dateComponents(calendarUnitYMD, from: date))
        return refDate == clampedDate
    }
    // MARK: - Date Property Checkers
    
    func isToday(date: Date) -> Bool {
        return RKFormatAndCompareDate(date: date, referenceDate: Date())
    }
     
    func isSpecialDate(date: Date) -> Bool {
        return isSelectedDate(date: date) ||
            isStartDate(date: date) ||
            isEndDate(date: date)
    }

    func isSelectedDate(date: Date) -> Bool {
        if selectedDate == nil {
            return false
        }
        return RKFormatAndCompareDate(date: date, referenceDate: selectedDate)
    }
    
    func isStartDate(date: Date) -> Bool {
        if startDate == nil {
            return false
        }
        return RKFormatAndCompareDate(date: date, referenceDate: startDate)
    }
    
    func isEndDate(date: Date) -> Bool {
        if endDate == nil {
            return false
        }
        return RKFormatAndCompareDate(date: date, referenceDate: endDate)
    }
    
    func isBetweenStartAndEnd(date: Date) -> Bool {
        if startDate == nil {
            return false
        } else if endDate == nil {
            return false
        } else if  Calendar.current.compare(date, to: startDate, toGranularity: .day) == .orderedAscending {
            return false
        } else if  Calendar.current.compare(date, to: endDate, toGranularity: .day) == .orderedDescending {
            return false
        }
        return true
    }
    
    func isStartDateAfterEndDate() -> Bool {
        if startDate == nil {
            return false
        } else if endDate == nil {
            return false
        } else if  Calendar.current.compare(endDate, to: startDate, toGranularity: .day) == .orderedDescending {
            return false
        }
        return true
    }
}


